<?php

namespace backend\models;

use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use backend\models\ServiceUser;
use common\models\User;

/**
 * UserSearch represents the model behind the search form about `common\models\User`.
 */
class UserSearch extends ServiceUser
{
    public $role;
    // public $username;
    // public $email;

    public function rules()
    {
        return [
            [['username', 'email'], 'save']
        ];
    }

    public function attributeLabels()
    {
        return array_merge(parent::attributeLabels(), [
            'role' => 'Роль'
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = self::find();

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            // Лимит постраничной навигации
            'pagination' => [
                'pagesize' => 10,
            ],
            // сортировака по полям
            'sort' => [
                'defaultOrder' => ['username' => SORT_ASC], // сортировка по умолчанию
                'attributes' => [ 
                    'username', 
                    'email',             
                    // 'role' => [
                    //     'asc' => ['auth_assignment.item_name' => SORT_ASC],
                    //     'desc' => ['auth_assignment.item_name' => SORT_DESC],
                    // ],            
                    'created_at',
                    'status',
                ]
            ]
            //   'city' => [
            //     'asc' => ['city_id' => SORT_ASC],
            //     'desc' => ['city_id' => SORT_DESC],
            //   ],
            //   'address',
            //   'client_name',
            //   'phone',
            //   'paymentType' => [
            //     'asc' => ['payment_type' => SORT_ASC],
            //     'desc' => ['payment_type' => SORT_DESC],
            //   ],
            //   'price',
            //   'orderStatus' => [
            //     'asc' => ['status' => SORT_ASC],
            //     'desc' => ['status' => SORT_DESC],
            //   ],
            //   'delivery_date',
            // ],
            // 'username', 'email', 'role','created_at','status'
        ]);

        if (!$this->load($params)) {
            return $dataProvider;
        }

        $query->andFilterWhere([
            'id' => $this->id,
            'status' => $this->status,
            'created_at' => $this->created_at,
            'updated_at' => $this->updated_at,
        ]);

        $query->andFilterWhere(['like', 'username', $this->username])
            ->andFilterWhere(['like', 'email', $this->email]);

        return $dataProvider;
    }

    public function getRoleId($title){
        switch ($title) {
            case 'Администратор сервиса':
                return self::SERVICE_ADMIN_ROLE;
                break;
            case 'Менеджер сервиса':
                return self::SERVICE_MANAGER_ROLE;
                break;
            
            default:
                return self::SERVICE_ADMIN_ROLE;
                break;
        }
    }
}
