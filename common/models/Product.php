<?php

namespace common\models;

use Yii;
use common\models\Balance;
use common\models\NotificationSettings;

/**
 * This is the model class for table "products".
 *
 * @property integer $id
 * @property string $title
 * @property integer $client_id
 * @property string $article
 * @property string $barcode
 * @property integer $balance
 * @property string $created_at
 * @property string $updated_at
 */
class Product extends \yii\db\ActiveRecord
{
  // private $oldBalance;
  /**
   * @inheritdoc
   */
  public static function tableName()
  {
      return 'products';
  }

  /**
   * @inheritdoc
   */
  public function rules()
  {
      return [
          [['title', 'client_id'], 'required'],
          [['client_id', 'balance', 'reserve'], 'integer'],
          [['created_at', 'nomenclature', 'code_client', 'barcode', 'article', 'balance'], 'safe'],
          [['title', 'article', 'barcode', 'nomenclature'], 'string', 'max' => 255]
      ];
  }

  /**
   * @inheritdoc
   */
  public function attributeLabels()
  {
      return [
          'id' => 'ID',
          'title' => 'Наименование',
          'nomenclature' => 'Номенклатура',
          'client_id' => 'Клиент',
          'article' => 'Артикуль',
          'code_client' => 'Код клиента',
          'barcode' => 'Штрих-код',
          'balance' => 'Остатки на складе',
          'created_at' => 'Дата добавления',
          'updated_at' => 'Дата обновления',
          'reserve' => 'Резерв',
      ];
  }

  // public function afterFind()
  // {
  //     $this->oldBalance = $this->balance;
  //     parent::afterFind(); // TODO: Change the autogenerated stub
  // }

  public function afterSave($insert, $changedAttributes)
  {
    // if (!empty($this->balance)) {
    //     if ($insert) {
    //         $this->oldBalance = 0;
    //     }
    //     // else{

    //     // }
    //     // if($this->balance > 0 || $this->oldBalance > 0){         
    //     //   if ($this->reserve > 0 && $this->motion == 'increase') {
    //     //       $analytics = new ProductAnalytics(['product_id' => $this->id,'created_at' => date('Y-m-d', time())]);
    //     //       $analytics->increase = 0; // Приход
    //     //       $analytics->decrease = $this->reserve; // Уход
    //     //       $analytics->save();
    //     //   } 
    //     //   // if ($this->oldBalance > $this->balance){
    //     //   //     $analytics->decrease = $this->oldBalance - $this->balance;
    //     //   //     $analytics->increase = 0;
    //     //   //     $analytics->save();
    //     //   // }        
    //     // }
    // }
    $balance = $this->getBalance()->one();
    if($balance){
        $balance->balance = $this->balance;
        $balance->save();
    }else{
        $balance = new Balance();
        $balance->product_id = $this->id;
        $balance->balance = $this->balance;
        $balance->save();
    }
    $endingProductsCount = 0;
    $endedProductsCount = 0;
    // Если есть запись о балансе
    if($balance){
      $factCount = preg_replace('/\D/',"",$this->balance);
      // Записываем все продукты которые меньше минимального остатка но не закончались
      if($factCount <= $balance->min_balance && $factCount > 0){
          $endingProductsCount++;
      }
      // Записываем все продукты которые закончились
      if($factCount == 0){
          $endedProductsCount++;
      }
    }        
    // Если есть записанные продукты то ищем email получателей
    if($endingProductsCount > 0 || $endedProductsCount > 0){
      if($client = Client::find()->where(['is_id'=>$this->client_id])->one()){
        $settings = NotificationSettings::find()->where(['client_id' => $client->id])->one();
        if($settings){
          // Получаем массив email
          $emails = array_diff(explode(',', $settings->emails),array(''));
          // Если есть email перебираем и отправляем
          if(count($emails) > 0){
            foreach ($emails as $email) {
              // Если нет ошибки  отправки письма то записываем в лог email получателя
              if(!empty($email) && $this->sendEmail($email,$endingProductsCount,$endedProductsCount)){
                Yii::info("Send notification for $email", 'emailSend');  
              }              
            }
          }
        }
      }
    }

    parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
  }

  public function getBalance()
  {
      return self::hasOne(Balance::className(), ['product_id' => 'id']);
  }

  private function sendEmail($email,$endingCount,$endedCount)
  {
    return Yii::$app->mailer->compose(
      ['html' => 'nowMinBalance-html', 'text' => 'nowMinBalance-text'],
      [
        'endingCount' => $endingCount,
        'endedCount' => $endedCount,
        'title' => $this->title,
        'nomenclature' => $this->nomenclature,
        'article' => $this->article,
        'barcode' => $this->barcode,
        'code_client' => $this->code_client,
        'balance' => $this->balance
      ]
    )
    ->setFrom([\Yii::$app->params['supportEmail'] => \Yii::$app->name . ' robot'])
    ->setTo($email)
    ->setSubject('Баланс на складе ' . \Yii::$app->name)
    ->send();
  }
}